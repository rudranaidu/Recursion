    static ArrayList<ArrayList<Integer>> zigzag_level_order_traversal(BinaryTreeNode root) {
        ArrayList<ArrayList<Integer>> finalTraversalOrder = new ArrayList<ArrayList<Integer>>();
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.offer(root);
        boolean zigZagorder = false;
        while(!q.isEmpty()){
            ArrayList<Integer> zigZagOrderList = new ArrayList<Integer>();
            Stack<Integer> s = new Stack<Integer>();
            int qSize = q.size();
            for(int i=0;i<qSize; i++) {
                 BinaryTreeNode node = q.poll();
                if(zigZagorder) {
                    s.push(node.value);
                 }else{
                     zigZagOrderList.add(node.value);
                 }
                if(node.left!=null) {
                    q.offer(node.left);
                }
                if(node.right!=null) {
                    q.offer(node.right);
                }
          }
          if(zigZagorder){
              while(!s.isEmpty()){
                  zigZagOrderList.add(s.pop());
              }
          }
          finalTraversalOrder.add(zigZagOrderList);
          zigZagorder = !zigZagorder;
        }
       return finalTraversalOrder; 
    }
