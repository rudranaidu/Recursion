lets say we need to consruct BST is when n=3;
  this can be solved by keeping 1 as root and 2 as root and 3 as root
if 1 is root then only 1 tree
if 2 is root then only 1 tree
if 3 is root then  3 subtrees

(3)
      /
    (2)
   /
(1)

   (3)
  /
(1)
   \
   (2)

(1)
   \
    (2)
      \
       (3)
ie in general if i is root then we have i-1 nodes in left and n-i nodes in right subtree.
in total we can consruct (i-1) * (n-i) trees.

static Long how_many_bsts(Integer n) {
        // Write your code here.
        
        if(n==0 || n==1) {
            return 1L;
        }
        
        long ans = 0;
        for(int i= 1; i<=n; i++){
            ans = ans + how_many_bsts(i-1) * how_many_bsts(n-i);
        }
        
        return ans;
    }
