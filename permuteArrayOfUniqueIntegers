    static ArrayList<ArrayList<Integer>> get_permutations(ArrayList<Integer> arr) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        permutationHelper(arr, new ArrayList<Integer>(), result);
        return result;
    }

private static void permutationHelper(ArrayList<Integer> arr, ArrayList<Integer> current , ArrayList<ArrayList<Integer>> result){
       if(arr.size() ==0) {
           result.add(new ArrayList<Integer> (current));
           return;
       }
        for(int i=0 ;i< arr.size(); i++) {
            int currentElement = arr.get(i);
            current.add(currentElement);
            ArrayList<Integer> remaining = new ArrayList<Integer>(arr);
            remaining.remove(i);
            permutationHelper(remaining, current, result);
            current.remove(current.size()-1); //backtrack
        }
}

Time complexity:

Recursive Calls:
In the permutation generation algorithm, we iterate through each element in the input array and generate permutations with the remaining elements.
This leads to a recursive structure where, for each element, we have 
n choices to consider.
First Element: 
n choices
Second Element: 
n−1 choices (one element is already used)
Third Element: 
n−2 choices
... and so on.
The total number of recursive calls is the product of these choices:
n×(n−1)×(n−2)×…×2×1=n!

The time complexity is O(n!) because the number of recursive calls grows factorially with the size of the input array. 

Spacecomplexity:

Total Space Complexity:
The total space complexity is the sum of the space used by these components.

Space Complexity=Space Used by Call Stack+Space Used by ArrayLists

Space Complexity=O(n)+O(n) ie O(n)
