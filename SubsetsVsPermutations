Generating Subsets
Definition: A subset is any combination of elements taken from a set, where the order does not matter and each element can either
be included or excluded.

Example:

For the set {1, 2, 3}, the subsets are: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}.
Algorithm Intuition:

Recursive Backtracking: For each element in the set, decide whether to include it in the current subset or not. This results in 
a binary decision (include/exclude) for each element, leading to 2^n possible subsets.
Start with an empty subset.
For each element, create two branches: one including the element and one excluding it.
Recursively apply the same logic to the remaining elements.
Collect all the subsets generated.
Key Points:

The total number of subsets of a set with n elements is 2^n.
The order of elements within a subset does not matter.
Subsets can vary in size from 0 to n elements.


public static List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    generateSubsets(0, nums, new ArrayList<>(), result);
    return result;
}

private static void generateSubsets(int index, int[] nums, List<Integer> current, List<List<Integer>> result) {
    result.add(new ArrayList<>(current));
    for (int i = index; i < nums.length; i++) {
        current.add(nums[i]);
        generateSubsets(i + 1, nums, current, result);
        current.remove(current.size() - 1);
    }
}

Generating Permutations
  A permutation is an arrangement of elements in a specific order. Every element appears exactly once in each permutation.

Example:
- For the set `{1, 2, 3}`, the permutations are: `{1, 2, 3}`, `{1, 3, 2}`, `{2, 1, 3}`, `{2, 3, 1}`, `{3, 1, 2}`, `{3, 2, 1}`.

Algorithm Intuition:
Recursive Backtracking: Generate all possible orderings by swapping elements.
  1. Start with the first element and swap it with each element, including itself, to place each element at the first position.
  2. Recursively generate permutations for the remaining elements.
  3. After exploring each branch, backtrack by swapping the elements back to their original positions.
  4. Collect all the permutations generated.

Key Points:
- The total number of permutations of a set with `n` elements is `n!` (factorial of `n`).
- The order of elements matters in permutations.
- Each permutation has exactly `n` elements.

Permutation Generation Example Code: video->https://www.youtube.com/watch?v=H232aocj7bQ&ab_channel=NikhilLohia
import java.util.*;

public class Permutations {

    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        backtrack(resultList, new ArrayList<>(), nums);
        return resultList;
    }

    private static void backtrack(List<List<Integer>> resultList, List<Integer> tempList, int[] nums) {
        // If we match the length, it is a permutation
        if (tempList.size() == nums.length) {
            resultList.add(new ArrayList<>(tempList));
            return;
        }
        for (int number : nums) {
            // Skip if we get same element
            if (tempList.contains(number))
                continue;

            // Add the new element
            tempList.add(number);

            // Go back to try other elements
            backtrack(resultList, tempList, nums);

            // Remove the element
            tempList.remove(tempList.size() - 1);
        }
    }

    // Example usage
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        List<List<Integer>> permutations = permute(nums);
        System.out.println(permutations);
    }
}

 Summary of Differences

1. Nature:
   - Subsets: Focuses on the presence or absence of each element, leading to `2^n` combinations.
   - Permutations: Focuses on the arrangement and order of elements, leading to `n!` combinations.

2. Algorithm Approach:
   - Subsets: Uses recursive backtracking to include/exclude each element.
   - Permutations: Uses recursive backtracking to swap elements and generate all orderings.

3. Order:
   - Subsets: Order within subsets does not matter.
   - Permutations: Order within permutations is crucial.

4. Size:
   - Subsets: Can vary in size from 0 to `n`.
   - Permutations: Always of size `n`.

Understanding these differences and the associated algorithmic approaches helps in distinguishing between the two problems and remembering the respective strategies during interviews.
