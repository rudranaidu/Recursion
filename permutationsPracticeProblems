1) Given a set of distinct integers, return all possible permutations.
Example: Input: [1, 2, 3], Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].





2) Permutations with Duplicates:
Given a collection of integers that might contain duplicates, return all unique permutations.
Example: Input: [1, 1, 2], Output: [[1, 1, 2], [1, 2, 1], [2, 1, 1]].

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DistinctPermutations {
    
    public static void distinctPermutations(List<Integer> list) {
        List<List<Integer>> finalList = new ArrayList<>();
        List<Integer> currentList = new ArrayList<>();
        permuteHelper(list, currentList, finalList);
        
        // Print the final list of permutations
        for (List<Integer> permutation : finalList) {
            System.out.println(permutation);
        }
    }
    
    private static void permuteHelper(List<Integer> arrList, List<Integer> currentList, List<List<Integer>> finalList) {
        if (arrList.size() == 0) {
            if (!finalList.contains(currentList)) {
                finalList.add(new ArrayList<>(currentList)); // Add a copy of currentList to finalList
            }
        } else {
            for (int i = 0; i < arrList.size(); i++) {
                int current = arrList.get(i);
                currentList.add(current);
                
                // Create a new list excluding the current element
                List<Integer> remainingList = new ArrayList<>(arrList);
                remainingList.remove(i);
                
                permuteHelper(remainingList, currentList, finalList);
                
                // Backtrack: remove the last added element
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<>();
        nums.add(1);
        nums.add(2);
        nums.add(2);
        
        distinctPermutations(nums);
    }
}



3) Next Permutation:
Implement a function to find the next lexicographical permutation of a list of numbers.
Example: Input: [1, 2, 3], Output: [1, 3, 2].



4) Kth Permutation Sequence:
Given n and k, return the kth permutation sequence of numbers 1 to n.
Example: Input: n = 3, k = 3, Output: "213".



5) String Permutations:
Given a string s, return all possible permutations of the string.
Example: Input: "abc", Output: ["abc", "acb", "bac", "bca", "cab", "cba"].



