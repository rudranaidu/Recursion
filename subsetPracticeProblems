1) Subsets of Fixed Length:
Given an integer array nums and an integer k, return all subsets of length k.
Example: Input: nums = [1, 2, 3, 4], k = 2, Output: [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]].


import java.util.ArrayList;
import java.util.List;

public class SubsetsWithFixedLength {

    public static void findAllSubsets(int subsetLength, ArrayList<Integer> nums) {
        ArrayList<ArrayList<Integer>> finalSubsets = new ArrayList<>();
        ArrayList<Integer> currentSolution = new ArrayList<>();
        subsetHelper(nums, subsetLength, 0, currentSolution, finalSubsets);
        
        // Printing the final subsets
        for (ArrayList<Integer> subset : finalSubsets) {
            System.out.println(subset);
        }
    }

    public static void subsetHelper(ArrayList<Integer> nums, int subsetLength, int index, ArrayList<Integer> currentSolution, ArrayList<ArrayList<Integer>> finalSubsets) {
	
        if (subsetLength == currentSolution.size()) {
            finalSubsets.add(new ArrayList<>(currentSolution));
        }

        for (int i = index; i < nums.size(); i++) {
            currentSolution.add(nums.get(i));
            subsetHelper(nums, targetSum, i + 1, currentSolution, finalSubsets);
            currentSolution.remove(currentSolution.size() - 1);
        }
    }

    public static void main(String[] args) {
        ArrayList<Integer> nums = new ArrayList<>();
        nums.add(2);
        nums.add(3);
        nums.add(6);
        nums.add(7);

        int subsetLength = 7;

        findAllSubsets(subsetLength, nums);
    }
}

2) Subsets with Sum Constraint:
Given an array of integers and a target sum, find all subsets whose sum is equal to the target.
Example: Input: nums = [2, 3, 6, 7], target = 7, Output: [[7], [2, 3, 2]].

package org.rudra.recursion;
import java.util.ArrayList;
public class SubsetsWithSum {
    public static void findAllSubsets(int targetSum, ArrayList<Integer> nums) {
        ArrayList<ArrayList<Integer>> finalSubsets = new ArrayList<>();
        ArrayList<Integer> currentSolution = new ArrayList<>();
        subsetHelper(nums, targetSum, 0, currentSolution, finalSubsets);
        
        // Printing the final subsets
        for (ArrayList<Integer> subset : finalSubsets) {
            System.out.println(subset);
        }
    }

    public static void subsetHelper(ArrayList<Integer> nums, int targetSum, int index, ArrayList<Integer> currentSolution, ArrayList<ArrayList<Integer>> finalSubsets) {
        int totalSum = 0;
        for (Integer num : currentSolution) {
            totalSum += num;
        }
        if (totalSum == targetSum) {
            finalSubsets.add(new ArrayList<>(currentSolution));
        }

        for (int i = index; i < nums.size(); i++) {
            currentSolution.add(nums.get(i));
            subsetHelper(nums, targetSum, i + 1, currentSolution, finalSubsets);
            currentSolution.remove(currentSolution.size() - 1);
        }
    }

    public static void main(String[] args) {
        ArrayList<Integer> nums = new ArrayList<>();
        nums.add(2);
        nums.add(3);
        nums.add(6);
        nums.add(7);

        int targetSum = 9;

        findAllSubsets(targetSum, nums);
    }
}

3) Subsets with Duplicates:
Given a collection of integers that might contain duplicates, return all possible subsets.
Example: Input: [1, 2, 2], Output: [[], [1], [2], [1,2], [2,2], [1,2,2]].

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SubsetsWithDuplicates {

    public static List<List<Integer>> findSubsetsWithDuplicates(int[] nums) {
        List<List<Integer>> finalSubsets = new ArrayList<>();
        Arrays.sort(nums); // Sort the array to handle duplicates
        backtrack(nums, 0, new ArrayList<>(), finalSubsets);
        return finalSubsets;
    }

    private static void backtrack(int[] nums, int start, List<Integer> currentSubset, List<List<Integer>> finalSubsets) {
        finalSubsets.add(new ArrayList<>(currentSubset));
        for (int i = start; i < nums.length; i++) {
            // Skip duplicates
            if (i > start && nums[i] == nums[i - 1]) continue;
            currentSubset.add(nums[i]);
            backtrack(nums, i + 1, currentSubset, finalSubsets);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2};
        List<List<Integer>> subsets = findSubsetsWithDuplicates(nums);
        for (List<Integer> subset : subsets) {
            System.out.println(subset);
        }
    }
}

output: 
[]
[1]
[1, 2]
[1, 2, 2]
[2]
[2, 2]

4) Bitwise Subsets:
Generate all subsets of a set using a bitwise approach.
Example: Input: [1, 2, 3], Output: [[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]].


public static List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    int n = nums.length;
    int numSubsets = 1 << n; // 2^n subsets (left shift means multiplication by 2 ie 1<<n = 2^n , right shift is division by 2)

    for (int i = 0; i < numSubsets; i++) {
        List<Integer> subset = new ArrayList<>();
        for (int j = 0; j < n; j++) {
            if ((i & (1 << j)) != 0) { // Check if j-th bit is set
                subset.add(nums[j]);
            }
        }
        result.add(subset);
    }

    return result;
}
