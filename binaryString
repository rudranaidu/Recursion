public class BinaryStringGenerator {

	public static void main(String[] args) {
		ArrayList<ArrayList<Integer>> resultList = new ArrayList();
		binaryStringGenerator(3,new ArrayList<Integer>(),resultList);
		for(ArrayList<Integer> binaryNumber:resultList) {
			System.out.println(binaryNumber);
		}
	}
	
	private static void binaryStringGenerator(int n, ArrayList<Integer> currentNumber, ArrayList<ArrayList<Integer>> resultList) {
		if(n==0) {
			resultList.add(new ArrayList<Integer>(currentNumber));
			return;
		}
		for(int i=0;i<=1;i++) {
			currentNumber.add(i);
			binaryStringGenerator(n-1,currentNumber,resultList);
			currentNumber.remove(currentNumber.size()-1);
		}
	}
}

static ArrayList<String> get_binary_strings(Integer n) {
        
       ArrayList<String> binaryStrings = new ArrayList<String>();
       binaryStringHelper(n, "", binaryStrings);
       return binaryStrings;
    }
 private static void binaryStringHelper(final int n, final String slate, 
        final ArrayList<String> result) {
        if (n == 0) {
           result.add(slate);
           return;
        }

        binaryStringHelper(n - 1, slate + "0",result);
        binaryStringHelper(n - 1, slate + "1", result);
    }



Time complexity:

The algorithm uses a recursive approach to generate binary strings.
At each level of the recursion tree, there are two recursive calls, one for appending '0' and the other for appending '1'.
The tree has a branching factor of 2, and the depth of the tree is n.
Number of Recursive Calls:

At each level of the recursion, the number of recursive calls doubles.
The total number of recursive calls is 2^n.
Time Complexity:

The time complexity is determined by the number of recursive calls, which is 2^n.
Therefore, the overall time complexity is O(2^n).
