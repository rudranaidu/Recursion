Given a binary tree, return all paths from root to leaf.

static ArrayList<ArrayList<Integer>> all_paths_of_a_binary_tree(BinaryTreeNode root) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> finalPaths = new ArrayList<ArrayList<Integer>>();
        helper(root, new ArrayList<Integer>(), finalPaths);
       return finalPaths;
    }
    
       private static void helper(BinaryTreeNode root, ArrayList<Integer> currentPath, 
       ArrayList<ArrayList<Integer>> finalPaths) {
             if(root == null) {
                 return;
             }
			  currentPath.add(root.value);
              if(root.left==null && root.right ==null) {
                  finalPaths.add(new ArrayList<Integer>(currentPath));
              }
			  else{
              helper(root.left,new ArrayList<Integer>(currentPath),finalPaths);
              helper(root.right,new ArrayList<Integer>(currentPath),finalPaths);
              }
              currentPath.remove(currentPath.size()-1); //backtrack
        }


Example one
Output:

[
[1, 2, 4],
[1, 2, 5],
[1, 3, 6],
[1, 3, 7]
]
